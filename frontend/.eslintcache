[{"/home/aroe/userflow/frontend/src/index.js":"1","/home/aroe/userflow/frontend/src/reportWebVitals.js":"2","/home/aroe/userflow/frontend/src/App.js":"3","/home/aroe/userflow/frontend/src/TestFetch.js":"4","/home/aroe/userflow/frontend/src/components/layout/Navbar.js":"5","/home/aroe/userflow/frontend/src/components/Login/Login.js":"6","/home/aroe/userflow/frontend/src/components/layout/Landing.js":"7"},{"size":426,"mtime":1610908732613,"results":"8","hashOfConfig":"9"},{"size":362,"mtime":1609263500490,"results":"10","hashOfConfig":"9"},{"size":562,"mtime":1610914685281,"results":"11","hashOfConfig":"9"},{"size":642,"mtime":1610568726672,"results":"12","hashOfConfig":"9"},{"size":1086,"mtime":1610913928240,"results":"13","hashOfConfig":"9"},{"size":2323,"mtime":1610906803257,"results":"14","hashOfConfig":"9"},{"size":865,"mtime":1610914539351,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"f400vj",{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"23","messages":"24","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25","usedDeprecatedRules":"26"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"/home/aroe/userflow/frontend/src/index.js",[],["33","34"],"/home/aroe/userflow/frontend/src/reportWebVitals.js",[],"/home/aroe/userflow/frontend/src/App.js",["35"],"/home/aroe/userflow/frontend/src/TestFetch.js",["36","37"],"import { json } from \"body-parser\";\nimport React, { useState, useEffect } from \"react\";\nconst TestFetch = (props) => {\n  // With function components you MUST use hooks\n  const [apiResponse, setApiResponse] = useState(\"\");\n  const callAPI = async () => await fetch(\"http://localhost:8080/api/users\");\n\n  // Component mount functions don't exist anymore, you must use an effect\n  useEffect(async () => {\n    const res = await callAPI();\n    const text = await res.text();\n    setApiResponse(text);\n  }, []);\n\n  return (\n    <div>\n      <h1>Welcome to aroe's website</h1>\n      <p>{apiResponse}</p>\n    </div>\n  );\n};\n\nexport default TestFetch;\n",["38","39"],"/home/aroe/userflow/frontend/src/components/layout/Navbar.js",[],"/home/aroe/userflow/frontend/src/components/Login/Login.js",["40","41"],"/home/aroe/userflow/frontend/src/components/layout/Landing.js",[],{"ruleId":"42","replacedBy":"43"},{"ruleId":"44","replacedBy":"45"},{"ruleId":"46","severity":1,"message":"47","line":5,"column":42,"nodeType":"48","messageId":"49","endLine":5,"endColumn":48},{"ruleId":"46","severity":1,"message":"50","line":1,"column":10,"nodeType":"48","messageId":"49","endLine":1,"endColumn":14},{"ruleId":"51","severity":1,"message":"52","line":9,"column":13,"nodeType":"53","endLine":13,"endColumn":4},{"ruleId":"42","replacedBy":"54"},{"ruleId":"44","replacedBy":"55"},{"ruleId":"46","severity":1,"message":"56","line":4,"column":16,"nodeType":"48","messageId":"49","endLine":4,"endColumn":25},{"ruleId":"46","severity":1,"message":"57","line":4,"column":27,"nodeType":"48","messageId":"49","endLine":4,"endColumn":35},"no-native-reassign",["58"],"no-negated-in-lhs",["59"],"no-unused-vars","'Switch' is defined but never used.","Identifier","unusedVar","'json' is defined but never used.","react-hooks/exhaustive-deps","Effect callbacks are synchronous to prevent race conditions. Put the async function inside:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching","ArrowFunctionExpression",["58"],["59"],"'useEffect' is defined but never used.","'useState' is defined but never used.","no-global-assign","no-unsafe-negation"]